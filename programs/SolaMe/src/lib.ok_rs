use anchor_lang::prelude::*;


declare_id!("8AJyEC4Gh4tGn21r1Qna3q5bSFryTvGe3ELp41Acnjcu");

#[program]
pub mod sola_me {
    use super::*;

    pub fn initialize(ctx: Context<Initialize>, data: String) -> ProgramResult {
        let base_account = &mut ctx.accounts.base_account;
        let copy = data.clone();

        let prog_id = ctx.program_id.clone();
        let remain = ctx.remaining_accounts.clone();
        let aut = ctx.accounts.authority.key.clone();
        let bpubkey = base_account.base_account.clone();
        msg!("Debug prog_id : {:?} ", prog_id);
        msg!("Debug remain : {:?} ", remain);
        msg!("Debug aut : {:?} ", aut);
        msg!("Debug bpubkey : {:?} ", bpubkey);

        //msg!("Debug bumps : {:?} ", bumps);

        base_account.data = data;
        base_account.data_list.push(copy);
        base_account.count = 0;
        //Err(ErrorMsg::ErrOne.into())
        Ok(())
    }

    pub fn increment(ctx: Context<Increment>) -> ProgramResult {
        let base_account = &mut ctx.accounts.base_account;
        base_account.count += 1;
        Ok(())
    }

    pub fn update(ctx: Context<Update>, data: String) -> ProgramResult {
        let base_account = &mut ctx.accounts.base_account;
        let copy = data.clone();


        let prog_id = ctx.program_id.clone();
        let remain = ctx.remaining_accounts.clone();
        let aut = ctx.accounts.authority.key.clone();
        let bpubkey = base_account.base_account.clone();
        msg!("Debug Update prog_id : {:?} ", prog_id);
        msg!("Debug Update remain : {:?} ", remain);
        msg!("Debug Update aut : {:?} ", aut);
        msg!("Debug Update bpubkey : {:?} ", bpubkey);

        base_account.data = data;
        base_account.data_list.push(copy);
        base_account.count += 1;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(mut)]
    pub authority: Signer<'info>,
    #[account(
        init,
        payer = authority,
        space = 8 + 8 + 64 + 64 + 64)]
    pub base_account: Account<'info, BaseAccount>,
    pub rent: Sysvar<'info, Rent>,
    pub system_program: Program<'info, System>,
}


#[derive(Accounts)]
pub struct Increment<'info>{
    #[account(mut)]
    pub base_account: Account<'info, BaseAccount>,
}

#[derive(Accounts)]
pub struct Update<'info> {
    #[account(mut)]
    pub authority: Signer<'info>,
    #[account(mut)]
    pub base_account: Account<'info, BaseAccount>,
}

#[account]
pub struct BaseAccount {
    //pub authority: Pubkey,
    pub base_account: Pubkey,
    pub count: u64,
    pub data: String,
    pub data_list: Vec<String>,
}

#[error]
pub enum ErrorMsg {
    #[msg("Error 001 !")]
    ErrOne,
}
